---
- name: Obtener fechas de expiraci√≥n y rotar secret si toca
  hosts: localhost
  connection: local
  gather_facts: false

  vars:
    threshold_days: 15  # Umbral para rotar antes de que expire

  tasks:
    - name: Obtener fechas de expiraci√≥n del SP
      ansible.builtin.command: >
        az ad app credential list --id {{ ansible_app_id }} --query "[].endDateTime" --output tsv
      register: expiry_raw
      changed_when: false
      no_log: true  # Oculta detalles sensibles

    - name: Mostrar fechas crudas obtenidas
      debug:
        msg: "Fechas crudas: {{ expiry_raw.stdout_lines }}"

    - name: Limpiar fechas (eliminar milisegundos si existen)
      set_fact:
        expiry_clean: "{{ expiry_raw.stdout_lines | map('regex_replace', '\\.\\d+Z?$', '') | list }}"

    - name: Mostrar fechas limpias
      debug:
        msg: "Fechas limpias: {{ expiry_clean }}"

    - name: Calcular timestamps de expiraci√≥n (enteros)
      ansible.builtin.command: "date -d '{{ item }}' +%s"
      register: timestamp_results
      loop: "{{ expiry_clean }}"
      changed_when: false
      no_log: true  # Oculta detalles sensibles

    - name: Extraer timestamps como enteros
      set_fact:
        expiry_timestamps: "{{ timestamp_results.results | map(attribute='stdout') | map('trim') | map('int') | list }}"

    - name: Mostrar timestamps calculados
      debug:
        msg: "Timestamps calculados: {{ expiry_timestamps }} (tipo: {{ expiry_timestamps | type_debug }})"

    - name: Determinar la fecha m√°s lejana de expiraci√≥n como entero
      set_fact:
        latest_expiry: "{{ ((expiry_timestamps | length > 0) | ternary(expiry_timestamps | max, 0)) | int, 0 }}"

    - name: Obtener timestamp actual
      ansible.builtin.command: "date +%s"
      register: now_ts_raw
      changed_when: false

    - name: Guardar timestamp actual como entero
      set_fact:
        now_ts: "{{ now_ts_raw.stdout | trim | int }}"

    - name: Mostrar valores previos al c√°lculo
      debug:
        msg: "latest_expiry={{ latest_expiry }} (tipo: {{ latest_expiry | type_debug }}), now_ts={{ now_ts }} (tipo: {{ now_ts | type_debug }})"

    - name: Debug tipo latest_expiry y now_ts
      debug:
        msg:
          - "latest_expiry={{ latest_expiry }} (tipo: {{ latest_expiry | type_debug}})"
          - "now_ts={{ now_ts }} (tipo: {{ now_ts | type_debug }})"

    - name: Calcular d√≠as restantes (entero)
      set_fact:
        days_left: "{{ ((latest_expiry | int) - (now_ts | int)) // 86400}}"
      when: latest_expiry != 0  # Evita c√°lculo si no hay fechas

    - name: Mostrar d√≠as restantes
      debug:
        msg: "D√≠as restantes antes del pr√≥ximo vencimiento: {{ days_left }}"

    - name: Decidir si hacer rotaci√≥n (true/false)
      set_fact:
        need_rotate: "{{ (days_left | int) < threshold_days }}"
      when: latest_expiry != 0

    - name: Mostrar decisi√≥n de rotar
      debug:
        msg: "¬øSe necesita rotar? {{ need_rotate }}"
      when: latest_expiry != 0

    - name: Rotar y guardar nuevo secret (si necesario)
      when: need_rotate | default(false)
      block:
        - name: Generar nuevo secret para el SP
          ansible.builtin.command: >
            az ad app credential reset
            --id {{ ansible_app_id }}
            --append
            --display-name "rotaci√≥n-ansible"
            --years 2
            --query password
            --output tsv
          register: new_secret
          changed_when: new_secret.rc == 0
          no_log: true  # Oculta el secreto

        - name: Mostrar el nuevo secret generado
          debug:
            msg: "Nuevo secret generado: [oculto por seguridad]"
          no_log: true  # Oculta el secreto

        - name: Fallar si no se gener√≥ nuevo secret
          fail:
            msg: "No se pudo generar el nuevo secret con az ad app credential reset"
          when: new_secret.stdout == ""

        - name: Guardar el nuevo secret en Azure Key Vault
          ansible.builtin.command: >
            az keyvault secret set
            --vault-name {{ keyvault_name }}
            --name {{ kv_secret_name }}
            --value "{{ new_secret.stdout }}"
          register: set_secret_out
          changed_when: set_secret_out.rc == 0
          check_mode: no
          no_log: true  # Oculta el secreto

    - name: Mensaje final
      debug:
        msg: >-
          {% if latest_expiry == 0 %}
            ‚ö†Ô∏è No se encontraron fechas de expiraci√≥n.
          {% elif need_rotate | default(false) %}
            üîÅ Se rot√≥ el secret. Quedan {{ days_left }} d√≠as hasta el pr√≥ximo vencimiento.
          {% else %}
            ‚úÖ No fue necesario rotar. Quedan {{ days_left }} d√≠as.
          {% endif %}

