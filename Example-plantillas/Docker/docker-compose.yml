
services:
  #jellyfin:
  #  image: jellyfin/jellyfin
  #  container_name: jellyfin
  #  restart: unless-stopped
  #  network_mode: host # Usa la red del host (incluye VPN) - Use the host network (includes VPN)
  #  volumes:
  #    - ./jellyfin/config:/config
  #    - ./jellyfin/cache:/cache
  #    - /home/NAME/videos:/media # ruta real en el servidor de series y peliculas - real path on the series and movie server
  #  environment:
  #    - PUID=1000
  #    - PGID=1000

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    
    volumes:
      - prometheus-data:/prometheus
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro # Datos en volumen - Data in volume
    network_mode: host
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --storage.tsdb.path=/prometheus
      - --web.enable-lifecycle
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:9090/-/ready"]
      interval: 30s
      timeout: 5s
      retries: 5

    
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana-conf/custom.ini:/etc/grafana/custom.ini:ro # Volumen necesario con el custom.ini para evitar variables que se antepongan - Volume required with custom.ini to avoid variables that take precedence
    environment:
        GF_SECURITY_ADMIN_USER: ${GF_USER} #Usa variables creadas en el Archivo de Grafana.env - Use variables created in the Grafana.env File
        GF_SECURITY_ADMIN_PASSWORD: ${GF_PASS} #Usa variables creadas en el Archivo de Grafana.env - Use variables created in the Grafana.env File
        GF_SERVER_HTTP_ADDR: 0.0.0.0
        GF_USERS_ALLOW_SIGN_UP: "false" #Evita que cualquiera cree una una cuenta - Prevents anyone from creating an account
    depends_on:
      prometheus:
        condition: service_healthy
    healthcheck: #Esto se encarga de que Docker genere pruebas para ver si el servicio sigue activo - This ensures that Docker generates tests to see if the service is still active
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 5s
      retries: 10

  
  node_exporter:
    image: prom/node-exporter:latest
    container_name: node_exporter
    restart: unless-stopped
    # Para metricas reales del host
    network_mode: host
    pid: host
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'

# Usar si tu VM no esta limitada par el uso de cgroups - Use if your VM is not limited to the use of cgroups
  #cadvisor:
  #  image: google/cadvisor:latest
  #  container_name: cadvisor
  #  restart: unless-stopped
  #  ports:
  #    - "8080:8080"
  #  volumes:
  #    - /:/rootfs:ro
  #    - /var/run:/var/run:ro
  #    - /sys:/sys:ro
  #    - /sys/fs/cgroup:/sys/fs/cgroup:ro
  #    - /var/lib/docker/:/var/lib/docker:ro

volumes:
  grafana-data:
  prometheus-data: